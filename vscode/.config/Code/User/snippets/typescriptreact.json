{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "React FC": {
    "prefix": "rfc",
    "body": [
      "import {FC, ReactNode} from 'react'",
      "",
      "interface Props {",
      "\tclassName?: string",
      "\tchildren?: ReactNode | ReactNode[]",
      "}",
      "export const $1: FC<Props> = ({className = '', children = null}) => {",
      "\treturn <div className={`\\${className}`}>{children}</div>",
      "}"
    ],
    "description": "React functional component"
  },
  "React Context": {
    "prefix": "ctx",
    "body": [
      "import React, { createContext, useContext, useReducer } from 'react'",

      "export interface $1State {",
      "}",
      "\n",
      "const reducer = (state: $1State, action): $1State => {",
      "\tswitch (action.type) {",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}",
      "\n",
      "const $1Context = createContext(null)",
      "const $1DispatchContext = createContext(null)",
      "\n",
      "export function $1Provider({ children, initialState }) {",
      "\tconst [state, dispatch] = useReducer(reducer, initialState)",
      "\n",
      "\treturn (",
      "\t\t<$1Context.Provider value={{state}}>",
      "\t\t\t<$1DispatchContext.Provider value={dispatch}>",
      "\t\t\t\t{children}",
      "\t\t\t</$1DispatchContext.Provider>",
      "\t\t</$1Context.Provider>",
      "\t)",
      "}",
      "\n",
      "export function use$1() {",
      "\treturn useContext($1Context)",
      "}",
      "\n",
      "export function use$1Dispatch() {",
      "\treturn useContext($1DispatchContext)",
      "}"
    ]
  }
}
